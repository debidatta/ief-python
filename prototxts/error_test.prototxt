name: "VGG_CNN_M_1024"
#layer {
#  name: "data"
#  type: "Python"
#  top: "data"
#  top: "error_kps"
#  python_param {
#    module: "ief_img_kp_data_layer"
#    layer: "ImageKPDataLayer"
#    param_str: '{"im_list":"camera_train.txt", "kp_list": "kp_list.txt", "phase":"TEST", "resize":"224", "ims_per_batch":"40", "root_dir":"/media/dey/debidatd/keypoint_data/","mean_file":"means/VGG_mean.npy","curr_kps":"curr_kps_train.txt"}'
#}
#  include: { phase: TEST }
#}
layer {
  name: "data"
  type: "Python"
  top: "data"
  top: "error_kps"
  python_param {
    module: "ief_img_kp_data_layer"
    layer: "ImageKPDataLayer"
    param_str: '{"im_list":"imageset/camera_test.txt", "kp_list": "kp_list.txt", "phase": "TEST", "resize":"224", "ims_per_batch":"40", "root_dir":"/media/dey/debidatd/keypoint_data/","mean_file":"means/VGG_mean.npy","curr_kps":"curr_kps_test.txt","shuffle":"0"}'
  } 
  include: { phase: TEST }
}
layer {
  bottom: "data"
  top: "conv1d"
  name: "conv1d"
  type: "Convolution"
  convolution_param {
    num_output: 96
    kernel_size: 7
    stride: 2
    weight_filler {
      type: "gaussian" # initialize the filters from a Gaussian
      std: 0.31622       # distribution with stdev 0.01 (default mean: 0)
    }
  }
}
layer {
  bottom: "conv1d"
  top: "conv1d"
  name: "relu1"
  type: "ReLU"
}
layer {
  bottom: "conv1d"
  top: "norm1"
  name: "norm1"
  type: "LRN"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  bottom: "norm1"
  top: "pool1"
  name: "pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool1"
  top: "conv2"
  name: "conv2"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 5
    stride: 2
  }
}
layer {
  bottom: "conv2"
  top: "conv2"
  name: "relu2"
  type: "ReLU"
}
layer {
  bottom: "conv2"
  top: "norm2"
  name: "norm2"
  type: "LRN"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  bottom: "norm2"
  top: "pool2"
  name: "pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool2"
  top: "conv3"
  name: "conv3"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3"
  top: "conv3"
  name: "relu3"
  type: "ReLU"
}
layer {
  bottom: "conv3"
  top: "conv4"
  name: "conv4"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4"
  top: "conv4"
  name: "relu4"
  type: "ReLU"
}
layer {
  bottom: "conv4"
  top: "conv5"
  name: "conv5"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5"
  top: "conv5"
  name: "relu5"
  type: "ReLU"
}
layer {
  bottom: "conv5"
  top: "pool5"
  name: "pool5"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool5"
  top: "fc6"
  name: "fc6"
  type: "InnerProduct"
  inner_product_param {
    num_output: 4096
  }
}
layer {
  bottom: "fc6"
  top: "fc6"
  name: "relu6"
  type: "ReLU"
}
layer {
  bottom: "fc6"
  top: "fc6"
  name: "drop6"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  bottom: "fc6"
  top: "fc7"
  name: "fc7"
  type: "InnerProduct"
  inner_product_param {
    num_output: 1024
  }
}
layer {
  bottom: "fc7"
  top: "fc7"
  name: "relu7"
  type: "ReLU"
}
layer {
  bottom: "fc7"
  top: "fc7"
  name: "drop7"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  bottom: "fc7"
  top: "fc8_err_kps"
  name: "fc8_err_kps"
  type: "InnerProduct"
  inner_product_param {
    num_output: 100
  }
}
layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "fc8_err_kps"
  bottom: "error_kps"
  top: "loss"
}  
#layers {
#  bottom: "fc8"
#  top: "prob"
#  name: "prob"
#  type: SOFTMAX
#}
